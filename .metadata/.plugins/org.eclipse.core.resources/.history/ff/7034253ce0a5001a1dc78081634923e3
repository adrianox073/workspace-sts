package com.apps.ws.ui.controller;

import org.modelmapper.ModelMapper;
import org.springframework.beans.BeanUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.MediaType;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.apps.ws.exceptions.UserServiceException;
import com.apps.ws.service.UserService;
import com.apps.ws.shared.dto.UserDto;
import com.apps.ws.ui.model.request.UserDetailsRequest;
import com.apps.ws.ui.model.response.ErrorMessage;
import com.apps.ws.ui.model.response.UserRest;

@Controller
@RestController
@RequestMapping("users")
public class UserController {

	@Autowired
	UserService userService;

	@GetMapping(path = "/{userId}", produces = { MediaType.APPLICATION_XML_VALUE, MediaType.APPLICATION_JSON_VALUE })
	public UserRest getUser(@PathVariable String userId) {
		UserRest userReturn = new UserRest();
		UserDto userDto = userService.findById(userId);
		BeanUtils.copyProperties(userDto, userReturn);
		return userReturn;
	}

	@GetMapping()
	public String getUsers(@RequestParam(value = "page", defaultValue = "1") int page,
			@RequestParam(value = "limit", defaultValue = "50") int limit,
			@RequestParam(value = "orden", defaultValue = "asc") String order) {
		return "Llamó al getUser.... " + page + " limit: " + limit + " Y orden: " + order;
	}

	@PostMapping(consumes = { MediaType.APPLICATION_XML_VALUE, MediaType.APPLICATION_JSON_VALUE }, produces = {
			MediaType.APPLICATION_XML_VALUE, MediaType.APPLICATION_JSON_VALUE })
	public UserRest createUser(@RequestBody UserDetailsRequest userDetail) throws UserServiceException {

		UserRest userReturn = new UserRest();

		if (userDetail.getLastname() == null || userDetail.getLastname().isEmpty())
			throw new UserServiceException(ErrorMessage.MISSING_REQUIRED_FIELD.getErrorMessage());

		ModelMapper modelMapper = new ModelMapper();
		UserDTO userDTO = modelMapper.map(UserDetails, UserDTO.class);

		UserDto createUser = userService.createUser(userDto);
		BeanUtils.copyProperties(createUser, userReturn);

		return userReturn;
	}

	@PutMapping(path = "/id", consumes = { MediaType.APPLICATION_XML_VALUE,
			MediaType.APPLICATION_JSON_VALUE }, produces = { MediaType.APPLICATION_XML_VALUE,
					MediaType.APPLICATION_JSON_VALUE })

	public UserRest updateUser(@PathVariable String id, @RequestBody UserDetailsRequest userDetails) {
		UserRest userReturn = new UserRest();

		UserDto userDto = new UserDto();
		BeanUtils.copyProperties(userDetails, userDto);

		UserDto updateUser = userService.updateUser(id, userDto);

		BeanUtils.copyProperties(updateUser, userReturn);
		return userReturn;
	}

	@DeleteMapping
	public String deleteUser() {
		return "Llamó a Delete User...";
	}

}
